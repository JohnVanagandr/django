1. Python
2. pip
3. path
4. django

------------------
Instalar Python, al momento de instalar debemos marcar pip y agregar la ruta del entorno

Agregar python a las variebles de entorno

C:\Users\jfbec\
C:Users\jfbec\AppData
seleccionamos Local -> Programas -> Python

luego copiamos la ruta => C:\Users\jfbec\AppData\Local\Programs\Python\Python312

no dirigimos a las variables de entorno y agregamos una nueva variable y l apegamos.

-----------------------
Instalar pip

De no tener instalado pip no podemos continuar

python -m ensurepip --default-pip

Luego instalamos Django en nuestro computador

python -m pip install Django==5.0.2

--------------------------
creamos nuestro primer proyecto

django-admin startproject adso

--------------------------
¿que es Django y para que nos sirve?
------------------------
¿cual es el patrón de arquitectura de Django?
-----------------------
estructura de un proyecto Django
----------------------
creamos la estructura de datos en nuestro proyecto, cada vez que trabajemos en nuestra estructura de datos 
tenemos que realizar el proceso
python manage.py migrate

podemos instalar el plugin sqltools para poder visualizar el archivo que se crea
pero para poder verlos instale SQLite Viewer y al momento de visualizar seleccione el plugin

-----------------------
para poder iniciar el servidor local
python manage.py runserver

podemos visualizar el resultado en nla url 127.0.0.1:8000

--------------------
creamos el archivo views.py

en este archivo creamos nuestras funciones para las vistas, luego agregamos las rutas en urls.py

----------------

rutas con parametros
<tipo parametro:nombre parametro>
persona/<int:edad>/

-----------------

plantillas

en el archivo setting buscamos el arreglo TEMPLATES y agregamos una posición con el nombre del ditectorio

'templates'

en la carpeta templates creamos nuestros archivos html

----------------------
para poder visualizar nuestros archivos html tenemos que importar en nuetro archivo de vistas el modulo render

from django.shortcuts import render

luego retornamos en la funcion el archivo renderizado(requets, ruta del html, contexto o parametros)

---------------------

Archivos estaticos, css, js etc

la configuración se encuentra en el archivo setting.py, buscamos la variable de entorno STATIC_URL

para agregar la ruta base de los archivos y poder cargarlos, agregamos una nueva variable de entorno

STATICFILES_DIRS = [
  BASE_DIR /"static",
  #'/var/www/static',
]

--------------------

extends - include

-------------------

Modularización

python manage.py startapp comentarios

agregamos el modulo a la configuración en el arreglo a aplicaciones

INSTALLED_APPA =[
	'comentarios'
]

validamos que el modulo se agrege correctamente con la sentencia

python manage.py check comentarios

---------------------

Modelo de datos

Programamos o configuramos las clase o modelo, esto se crear dentro de muestro modulo en
la clase models.py

Luego creamos la migración 
python manage.py makemigrations 

Para finalizar corriendo nuevamente las migraciones
python manage.py migrate


--------------------

Delegación de rutas

creamos las rutas de modulo en el mismo modulo
urls.py

creamos las vistas en el modulo

Nota: los modelos se crean en singular y con la primera letra en mayuscula
--------------------

seeding y paquetes

https://github.com/Brobin/django-seed

python -m pip install django-seed

python manage.py seed post --number=50

python -m pip install psycopg2-binary

--------------------

Consultas

https://docs.djangoproject.com/en/5.0/topics/db/queries/

---------------------

relaciones
https://docs.djangoproject.com/es/5.0/topics/db/examples/

django-admin startproject relaciones

cd relaciones

uno a uno

python manage.py startapp onetoone

python manage.py check onetoone

python manage.py migrate

//Programamos los modelos

python manage.py makemigrations
python manage.py migrate

//programamos las urls y las vitas
//guardarmos los datos en las vistas

uno a muchos y muchos a uno

python manage.py startapp manytoone

python manage.py check manytoone

//Programamos los modelos

python manage.py makemigrations
python manage.py migrate

relaciones inversas 

modelo.modelo_relacional_set

muchos a muchos

python manage.py startapp manytomany

python manage.py check manytomany

//Programamos los modelos

python manage.py makemigrations
python manage.py migrate







